{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
upsampled_X = pd.DataFrame(X.resample('50ms').mean())\
\
X_axis_final = pd.DataFrame(upsampled_X.interpolate(method = 'linear'))\
\
us_X = pd.DataFrame(upsampled_X)\
\
X_axis_final = upsampled_X.interpolate(method = 'linear')\
\
plt.plot(training_set['Timeframe'], training_set['X axis'])\
\
plt.plot(training_set['Timeframe'], training_set['X axis'])\
\
new_timeframe = np.arange(0, 1824, 0.05)\
\
\
\
\
\
interpolate_function = interpolate.interp1d(training_set.iloc[:,1], training_set.iloc[:,2], axis = 0, fill_value="extrapolate")\
X_axis_final = interpolate_function((new_timeframe.astype('int64')))\
\
interpolate_function = interpolate.interp1d(training_set.iloc[:,1].astype('int64'), training_set.iloc[:,3], axis = 0, fill_value="extrapolate")\
Y_axis_final = interpolate_function((new_timeframe.astype('datetime64[ns]')).astype('int64'))\
\
interpolate_function = interpolate.interp1d(training_set.iloc[:,1], training_set.iloc[:,4], axis = 0, fill_value="extrapolate")\
Z_axis_final = interpolate_function((new_timeframe)\
\
plt.plot(new_timeframe, X_axis_final)\
\
\
\
\
\
interpolate_function = interpolate.interp1d(wrist_left_time_fsef.astype('int64'), wrist_left_accelerometer_x,axis=0,fill_value="extrapolate") # find interpolation function\
X_axis_final = interpolate_function((wrist_left_time.astype('datetime64[ns]')).astype('int64'))\
\
\
"""\
Tns = int(1e9 * (1/wrist_left_fs_effective)) # as sampling number is not round this will introduce some slight shift\
wrist_left_time_fsef = np.asarray(Tns * (np.linspace(0, len(wrist_left_ppg), len(wrist_left_ppg), endpoint=False)),dtype='datetime64[ns]')\
dt3 = ecg_start_peak - wrist_left_time_fsef[0]\
wrist_left_time_fsef = wrist_left_time_fsef + dt3\
 \
# Re-sample onto the correct 200 Hz timebase\
interpolate_function = interpolate.interp1d(wrist_left_time_fsef.astype('int64'), wrist_left_ppg,axis=0,fill_value="extrapolate") # find interpolation function\
wrist_left_ppg_final = interpolate_function((wrist_left_time.astype('datetime64[ns]')).astype('int64'))\
\
interpolate_function             = interpolate.interp1d(wrist_left_time_fsef.astype('int64'), wrist_left_accelerometer_x,axis=0,fill_value="extrapolate") # find interpolation function\
wrist_left_accelerometer_x_final = interpolate_function((wrist_left_time.astype('datetime64[ns]')).astype('int64'))\
interpolate_function             = interpolate.interp1d(wrist_left_time_fsef.astype('int64'), wrist_left_accelerometer_y,axis=0,fill_value="extrapolate") # find interpolation function\
wrist_left_accelerometer_y_final = interpolate_function((wrist_left_time.astype('datetime64[ns]')).astype('int64'))\
interpolate_function             = interpolate.interp1d(wrist_left_time_fsef.astype('int64'), wrist_left_accelerometer_z,axis=0,fill_value="extrapolate") # find interpolation function\
wrist_left_accelerometer_z_final = interpolate_function((wrist_left_time.astype('datetime64[ns]')).astype('int64'))\
"""\
 \
}