{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 X = training_set.iloc[:, 1:3]\
X = X.set_index(['Timeframe'])\
X.index = pd.to_datetime(X.index, unit='s')\
X = X.resample('0.0005S', how='mean').interpolate()\
import numpy as np\
import matplotlib.pyplot as plt\
import pandas as pd\
from scipy import interpolate\
import pickle # to serialise objects\
from scipy import stats\
import seaborn as sns\
from sklearn import metrics\
from sklearn.model_selection import train_test_split\
dataset_train = pd.read_csv('acceleration_labelled_data.csv') \
training_set = pd.DataFrame(dataset_train.iloc[:, 1:6].values)\
training_set.columns = ["Activity", "Timeframe", "X axis", "Y axis", "Z axis"]\
X = training_set.iloc[:, 1:3]\
X = X(dtype=float)\
X = training_set.iloc[:, 1:3].dtype(float)\
dataset_train = pd.read_csv('acceleration_labelled_data.csv') \
training_set = pd.DataFrame(dataset_train.iloc[:, 1:6].values, dtype = float)\
training_set.columns = ["Activity", "Timeframe", "X axis", "Y axis", "Z axis"]\
dataset_train = pd.read_csv('acceleration_labelled_data.csv') \
training_set = pd.DataFrame(dataset_train.iloc[:, 1:6].values)\
training_set.columns = ["Activity", "Timeframe", "X axis", "Y axis", "Z axis"]\
import numpy as np\
import matplotlib.pyplot as plt\
import pandas as pd\
from scipy import interpolate\
import pickle # to serialise objects\
from scipy import stats\
import seaborn as sns\
from sklearn import metrics\
from sklearn.model_selection import train_test_split\
dataset_train = pd.read_csv('acceleration_labelled_data.csv') \
training_set = pd.DataFrame(dataset_train.iloc[:, 1:6].values)\
training_set.columns = ["Activity", "Timeframe", "X axis", "Y axis", "Z axis"]\
X = training_set.iloc[:, 1:3]\
X = pd.to_numeric('float')\
X = X.set_index(['Timeframe'])\
X.index = pd.to_datetime(X.index, unit='s')\
X = X.resample('0.0005S', how='mean').interpolate()\
X = pd.DataFrame(dtype = float)\
X = training_set.iloc[:, 1:3]\
X = pd.DataFrame(\{training_set.iloc[:, 1:3]\}, dtype = float)\
tmp = pd.resample(X, '0.0005S', 'mean' ).interpolate\
resampled = pd.resample(tmp, '0.05S', 'ffill')\
mp = X.resample('0.0005S', 'mean').interpolate()\
tmp = X.resample('0.0005S', 'mean').interpolate()\
X = X.set_index(['Timeframe'])\
X.index = pd.to_datetime(X.index, unit='S')\
X = X.set_index(['Timeframe'])\
X.index = pd.to_datetime(X.index, unit='s')\
X = training_set.iloc[:, 1:3]\
X = X.set_index(['Timeframe'])\
X.index = pd.to_datetime(X.index, unit='s')\
X = X.resample('0.0005S', how='mean').interpolate()\
X = X.resample('0.0005S','mean').interpolate()\
X = X.astype(float)\
X = X.resample('0.0005S','mean').interpolate()\
X = X.resample('0.05S', 'mean').interpolate()\
plt.plot(training_set['Timeframe'], training_set['X axis'], color = 'red')\
plt.plot(X, color = 'blue')\
plt.plot(training_set['Timeframe'], training_set['X axis'])\
plt.plot(X)\
plt.plot(training_set['Timeframe'], training_set['X axis'])\
plt.plot(training_set['Timeframe'], X)\
plt.plot(Index, X)\
plt.plot(X.Index, X)\
X = X.resample('0.001S','mean').interpolate()\
X = X.resample('0.05S', 'mean').interpolate()\
new_timeframe = np.arange(0, 1824, 0.05)\
plt.plot(new_timeframe, X)\
new_timeframe = np.arange(0, 1823.5, 0.05)\
plt.plot(x=X.index, y='X axis')\
plt.plot(use_index=True, y='X axis')\
plt.plot(use_index=True, X)\
plt.plot(X, use_index=True)\
X.plot()\
plt.plot(training_set['Timeframe'], training_set['X axis'])\
X_old = training_set.iloc[:, 1:3]\
X_old = X_old.set_index(['Timeframe'])\
X_old.index = pd.to_datetime(X_old.index, unit='s')\
X_old.plot()\
X.plot()\
X.plot()\
X_old.plot()\
X.plot(color = 'red')\
X_old.plot()\
plt.plot(X, use_index = True)\
X.reset_index()\
X = X.reset_index()\
plt.plot(X['Timeframe'], X['X axis'])\
X_old = X_old.reset_index()\
plt.plot(X_old['Timeframe'], X_old['X axis'])\
X = X.reset_index()\
plt.plot(X['Timeframe'], X['X axis'])\
\
X_old = X_old.reset_index()\
plt.plot(X_old['Timeframe'], X_old['X axis'])\
plt.show()\
\
## ---(Mon Nov 11 02:54:50 2019)---\
import numpy as np\
import matplotlib.pyplot as plt\
import pandas as pd\
from scipy import interpolate\
import pickle # to serialise objects\
from scipy import stats\
import seaborn as sns\
from sklearn import metrics\
from sklearn.model_selection import train_test_split\
dataset_train = pd.read_csv('acceleration_labelled_data.csv') \
training_set = pd.DataFrame(dataset_train.iloc[:, 1:6].values)\
training_set.columns = ["Activity", "Timeframe", "X axis", "Y axis", "Z axis"]\
X = training_set.iloc[:, 1:3]\
X = X.set_index(['Timeframe'])\
X.index = pd.to_datetime(X.index, unit='s')\
X = X.astype(float)\
X = X.resample('0.001S','mean').interpolate()\
X = X.resample('0.05S', 'mean').interpolate()\
X_old = training_set.iloc[:, 1:3]\
X_old = X_old.set_index(['Timeframe'])\
X_old.index = pd.to_datetime(X_old.index, unit='s')\
X = X.reset_index()\
X_old = X_old.reset_index()\
plt.plot(X['Timeframe'], X['X axis'])\
plt.plot(X_old['Timeframe'], X_old['X axis'])\
plt.plot(X['Timeframe'], X['X axis'])\
plt.plot(X['Timeframe'], X['X axis'], color = 'red')\
plt.plot(X_old['Timeframe'], X_old['X axis'], color = 'blue')\
plt.plot(X['Timeframe'], X['X axis'], color = 'red')\
Y = training_set.iloc[:, [1][4]]\
Y = training_set.iloc[:, [1][3]]\
Y = training_set.iloc[:, [1,3]]\
Y = Y.set_index(['Timeframe'])\
Y.index = pd.to_datetime(Y.index, unit='s')\
Y = X.astype(float)\
Y.index = pd.to_datetime(Y.index, unit='s')\
Y = X.astype(float)\
Y = Y.astype(float)\
Y = Y.resample('0.001S','mean').interpolate()\
Y = Y.resample('0.05S', 'mean').interpolate()\
Y_old = training_set.iloc[:, [1,3]]\
Y_old = Y_old.set_index(['Timeframe'])\
Y_old.index = pd.to_datetime(Y_old.index, unit='s')\
Y = Y.reset_index()\
Y_old = Y_old.reset_index()\
plt.plot(Y['Timeframe'], Y['Y axis'], color = 'red')\
plt.plot1(Y['Timeframe'], Y['Y axis'], color = 'red')\
plt.plot(Y['Timeframe'], Y['Y axis'], color = 'red')\
plt.plot(Y_old['Timeframe'], Y_old['Y axis'], color = 'blue')\
Z = training_set.iloc[:, [1,4]]\
Z = Z.set_index(['Timeframe'])\
Z.index = pd.to_datetime(Z.index, unit='s')\
Z = Z.astype(float)\
Y = Y.resample('0.001S','mean').interpolate()\
Z = Z.resample('0.001S','mean').interpolate()\
Z = Z.resample('0.05S', 'mean').interpolate()\
Z_old = training_set.iloc[:, [1,4]]\
Z_old = Z_old.set_index(['Timeframe'])\
Z_old.index = pd.to_datetime(Z_old.index, unit='s')\
Z = Z.reset_index()\
Z_old = Z_old.reset_index()\
plt.plot(Z['Timeframe'], Z['Y axis'], color = 'red')\
plt.plot(Z['Timeframe'], Z['Z axis'], color = 'red')\
plt.plot(Z_old['Timeframe'], Z_old['Z axis'], color = 'blue')\
training_set.info()\
countofActivity = training_set['Activity'].value_counts()\
print(countofActivity)\
countofActivity.plot(kind = 'bar', title = 'Training examples by activity type')\
Final_df = pd.concat([X, Y, Z], axis = 1)\
Final_df = pd.drop([2,4], axis = 1)\
Final_df = Final_df.drop([2,4], axis = 1)\
Final_df = Final_df.drop([2], axis = 1)\
Final_df = Final_df.drop(Final_df.column[2,4], axis = 1)\
Final_df = Final_df.drop(Final_df.columns[2,4], axis = 1)\
Final_df = Final_df.drop(Final_df.columns[2], axis = 1)\
Final_df = pd.concat([X, Y, Z], axis = 1)\
Final_df.columns = ['Time', 'X axis', 'remove', 'Y axis', 'remove', 'Z axis']\
Final_df = Final_df.drop(Final_df.columns[2], axis = 1)\
plt.plot(X_old['Timeframe'], X_old['X axis'], color = 'blue')\
plt.plot(X['Timeframe'], X['X axis'], color = 'red')\
plt.plot(X_old['Timeframe'], X_old['X axis'], color = 'blue')\
plt.plot(X['Timeframe'], X['X axis'], color = 'red')\
training_set.iloc[:,1]\
training_set.iloc[:,1].to_numpy\
training_set.iloc[:,1].to_numpy()\
(training_set.iloc[:,1].to_numpy()).astype('int64')\
training_set.iloc[:,1].to_numpy(dtype='datetime64[ns]')\
(training_set.iloc[:,1].to_numpy()).to_datetime()\
(training_set.iloc[:,1].to_numpy()).astype('datetime64[ns]')\
\
\\\
\
\\\
\
\
p = training_set.iloc[:,1].to_numpy()\
p\
p.astype('int64')\
p.astype('datetime64[ns]')\
q =p.astype('int64')\
q.astype('datetime64[ns]')\
p\
p.astype('np.float64')\
p.astype('np.float')\
p.astype('float')\
p.astype('float64')\
(p.astype('float64')).astype('datetime64[ns]')\
p.astype('float64')\
(p.astype('float64')).astype('datetime64[ms]')\
p\
(p.astype('float64')).astype('datetime64[s]')\
p\
(p*1000000).astpye('int64')\
(p*1000000).astype('int64')\
oo = (p*1000000).astype('int64')\
f = X\
X\
oo}